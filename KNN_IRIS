# -*- coding: utf-8 -*-
"""
Created on Thu Mar  7 17:59:31 2019    
@author: 60464
Python:3.7
Purpose:Using the KNN algorithm to classifiy IRIS data
        the database come from sklearn.datasets
Version:1.0.0
Version description:
    Part1:Main KNN algorithm for classification
    Part2:Differene K value can get different accuracy and draw the curve
    Part3:Visualizing Data-Draw a radar map using test data

"""

import numpy as np
import copy
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt


########  PART 1 Main KNN algorithm for classification

#define the function to calculate the matrix Euclidean distance
def Calc_matrix(x_test_data,x_trian_data):
    x_test_Copy_data=np.tile(x_test_data,(len(x_trian_data),1))
    diff_matix=x_test_Copy_data-x_trian_data
    squ_diff=diff_matix**2
    distance=squ_diff.sum(axis=1)**0.5
    return  distance
#define the function to sort the order form min to max and return the serial number
def sorted_algorithm(distance,distance_disorder):
    tmp=[0]
#Bubble sort algorithm
    for i in range(len(distance)):
        for j in range(len(distance)-i-1):
            if distance[j+1]<distance[j]:
                tmp[0]=distance[j+1]
                distance[j+1]=distance[j]
                distance[j]=tmp[0]

    Serial_Number=np.zeros(len(distance),dtype=int)
    for i in range(len(distance)):
        for j in range(len(distance)):
            if distance[i]==distance_disorder[j]:
                Serial_Number[i]=j
    return  Serial_Number
#define the function to calculate the time of y(label) and return the serial number of MAX times
def Calclabel(k,Serial_Number,y_data):
    counter1=0
    counter2=0
    counter3=0
    for i in range(k):
        if y_data[Serial_Number[i]]==0:
            counter1+=1
        elif y_data[Serial_Number[i]]==1:
            counter2+=1
        else:
            counter3+=1
    count=[counter1,counter2,counter3]
    count_disorder=copy.deepcopy(count)
    Serial_Number=sorted_algorithm(count,count_disorder)
    return  Serial_Number[-1]
#define main function and return accuracy of all test data
def mainfunction(k):
    counter_test=0
    for i in range(len(x_test_data)):
        distance=Calc_matrix(x_test_data[i],x_trian_data)
        distance_disorder=copy.deepcopy(distance)
        Serial_Number=sorted_algorithm(distance,distance_disorder)
        predicted_label=Calclabel(k,Serial_Number,y_trian_data)
        #print(predicted_label)
        if predicted_label==y_test_data[i]:
            counter_test+=1
            #print(counter_test)
        else:
            print('预测输出是{0}，但实际输出是{1}，序列号是{2}'.format(predicted_label,y_test_data[i],i))
    print('k={0},预测正确率:{1}'.format(k,counter_test/len(x_test_data)))
    return  counter_test/len(x_test_data)
#load train data
iris=load_iris() 
x_trian_data=np.concatenate((iris.data[0:30],iris.data[50:80],iris.data[100:130]),axis=0)
y_trian_data=np.concatenate((iris.target[0:30],iris.target[50:80],iris.target[100:130]),axis=0)
#load test data
x_test_data=np.concatenate((iris.data[30:50],iris.data[80:100],iris.data[130:150]),axis=0)
y_test_data=np.concatenate((iris.target[30:50],iris.target[80:100],iris.target[130:150]),axis=0)

#define K and get the accuracy of all test data
k=3
mainfunction(k)

########  PART 2  Differene K value can get different accuracy and draw the curve
xxx=np.zeros(len(x_trian_data))
for i in range(1,len(x_trian_data)):
    xxx[i]=mainfunction(i)  
plotx=np.linspace(1,len(x_trian_data)-1,len(x_trian_data)-1)
ploty=xxx[1:]
plt.plot(plotx, ploty)
plt.show()

########  PART 3  Visualizing Data:Draw a radar map using test data(only 10)
fig = plt.figure()
x_trian_data=np.concatenate((iris.data[0:10],iris.data[50:60],iris.data[100:110]),axis=0)
y_trian_data=np.concatenate((iris.target[0:10],iris.target[50:60],iris.target[100:110]),axis=0)
for i in range(len(x_trian_data)):
    data=x_trian_data[i]
    labels = np.array(['x1','x2','x3','x4'])
    dataLenth = 4
    angles = np.linspace(0, 2*np.pi, dataLenth, endpoint=False)
    data = np.concatenate((data, [data[0]])) 
    angles = np.concatenate((angles, [angles[0]])) 
    
    ax = fig.add_subplot(111, polar=True)
    if i<10:
        ax.plot(angles, data, 'bo-', linewidth=2)
    elif i<20:
        ax.plot(angles, data, 'r-', linewidth=2)
    else:
        ax.plot(angles, data, 'y-', linewidth=2)
ax.set_thetagrids(angles * 180/np.pi, labels, fontproperties="SimHei")
ax.set_title("IRIS Visualizing Data", va='bottom', fontproperties="SimHei")
ax.grid(True)
plt.show() 

